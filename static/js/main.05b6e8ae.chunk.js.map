{"version":3,"sources":["components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","api/api.ts","components/NewCommentForm/NewCommentForm.tsx","api/comments.ts","components/PostDetails/PostDetails.tsx","api/posts.ts","App.tsx","api/users.ts","index.tsx"],"names":["Loader","React","memo","className","PostsList","posts","selectedPostId","onSelectPost","length","style","textAlign","map","post","userId","title","type","onClick","id","BASE_URL","getData","url","fetch","then","res","json","catch","Response","Error","NewCommentForm","postId","onRefreshComent","useState","name","setNewName","email","setNewEmail","body","setNewBody","setNewId","useEffect","comments","Math","max","comment","onSubmit","event","obj","preventDefault","method","headers","JSON","stringify","placeholder","value","onChange","target","required","PostDetails","details","setComments","isCmntsVisible","setCmntsVisible","isRefreshedComment","refreshComent","currentPostComments","commentId","getAllPosts","getUserPosts","filter","App","visiblePosts","setVisiblePosts","users","setUsers","setDetails","isDetailsVisible","setDetailsVisibilyty","setSelectedPostId","HandleSelect","a","allUsers","user","onSetDetailVisibility","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.05b6e8ae.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = React.memo(() => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n));\n","import React from 'react';\nimport { Post } from '../../types/Post';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\ninterface Props {\n  posts: Post[] | null\n  selectedPostId: number\n  onSelectPost: React.Dispatch<React.SetStateAction<number>>\n  onSetDetailVisibility: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nexport const PostsList = React.memo<Props>(({\n  posts,\n  selectedPostId,\n  onSelectPost,\n}) => {\n  if (!posts) {\n    return <Loader />;\n  }\n\n  if (posts.length === 0) {\n    // eslint-disable-next-line max-len\n    return <h1 style={{ textAlign: 'center' }}>The user has no posts yet</h1>;\n  }\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts.map(post => {\n          const handlePostSelector = () => {\n            if (selectedPostId === post.id) {\n              onSelectPost(0);\n            } else {\n              onSelectPost(post.id);\n            }\n          };\n\n          return (\n            <li key={post.id} className=\"PostsList__item\">\n              <div>\n                <b>{`[User #${post.userId}]: `}</b>\n                {post.title}\n              </div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={handlePostSelector}\n              >\n                {selectedPostId === post.id ? 'Close' : 'Open'}\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n});\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport function getData<T>(url: string): Promise<T> {\n  return fetch(`${BASE_URL}${url}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, { useEffect, useState } from 'react';\nimport { createPostComment, getAllComments } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  postId: number,\n  onRefreshComent: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nexport const NewCommentForm = React.memo<Props>(({\n  postId,\n  onRefreshComent,\n}) => {\n  const [name, setNewName] = useState('');\n  const [email, setNewEmail] = useState('');\n  const [body, setNewBody] = useState('');\n  const [id, setNewId] = useState(0);\n\n  useEffect(() => {\n    getAllComments()\n      .then(comments => setNewId(Math.max(...comments\n        .map(comment => comment.id)) + 1));\n  });\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    createPostComment({\n      id,\n      postId,\n      name,\n      email,\n      body,\n    });\n\n    setNewName('');\n    setNewEmail('');\n    setNewBody('');\n    onRefreshComent(true);\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={({ target }) => setNewName(target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={({ target }) => setNewEmail(target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={({ target }) => setNewBody(target.value)}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n});\n","import { Comment } from '../types/Comment';\nimport { BASE_URL, getData } from './api';\n\nexport const getAllComments = () => getData<Comment[]>('/comments');\n\nexport const getPostComments = (postId: number) => getData<Comment[]>(`/comments?postId=${postId}`);\n\nexport function deletePostComment(commentId: number) {\n  return fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n}\n\nexport function createPostComment(obj: Comment) {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json; charset=UTF-8' },\n    body: JSON.stringify(obj),\n  });\n}\n","import React, { useEffect, useState } from 'react';\nimport { deletePostComment, getPostComments } from '../../api/comments';\nimport { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  details: Post | null,\n  selectedPostId: number,\n}\n\nexport const PostDetails = React.memo<Props>(({\n  details,\n  selectedPostId,\n}) => {\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [isCmntsVisible, setCmntsVisible] = useState(false);\n  const [isRefreshedComment, refreshComent] = useState(false);\n\n  useEffect(() => {\n    if (selectedPostId === details?.id || isRefreshedComment) {\n      getPostComments(selectedPostId)\n        .then(currentPostComments => setComments(currentPostComments));\n    }\n\n    if (selectedPostId !== details?.id) {\n      setComments(null);\n    }\n\n    refreshComent(false);\n  }, [details?.id, isRefreshedComment]);\n\n  if (details?.id !== selectedPostId) {\n    return <Loader />;\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{details.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {!comments\n          ? <Loader />\n          : comments.length !== 0 && (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setCmntsVisible(!isCmntsVisible)}\n            >\n              {isCmntsVisible\n                ? `Hide ${comments.length} comments`\n                : `Show ${comments.length} comments`}\n            </button>\n          )}\n\n        {isCmntsVisible && (\n          <ul className=\"PostDetails__list\">\n            {comments?.map(comment => {\n              const deleteComment = () => {\n                deletePostComment(comment.id);\n                refreshComent(true);\n              };\n\n              return (\n                <li\n                  key={comment.id}\n                  className=\"PostDetails__list-item\"\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={deleteComment}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPostId}\n            onRefreshComent={refreshComent}\n          />\n        </div>\n      </section>\n    </div>\n  );\n});\n","import { Post } from '../types/Post';\nimport { getData } from './api';\n\nexport const getAllPosts = () => getData<Post[]>('/todos');\n\nexport const getUserPosts = (userId: number) => getAllPosts()\n  .then(posts => posts\n    .filter(post => post.userId === userId));\n\nexport const getPostDetails = (postId: number) => getData<Post>(`/posts/${postId}`);\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Post } from './types/Post';\nimport { getAllPosts, getPostDetails, getUserPosts } from './api/posts';\nimport { getUsers } from './api/users';\nimport { User } from './types/User';\n\nconst App: React.FC = () => {\n  const [visiblePosts, setVisiblePosts] = useState<Post[] | null>(null);\n  const [users, setUsers] = useState<User[]>([]);\n  const [details, setDetails] = useState<Post | null>(null);\n  const [isDetailsVisible, setDetailsVisibilyty] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const HandleSelect = async ({\n    target,\n  }: React.ChangeEvent<HTMLSelectElement>) => {\n    setVisiblePosts(null);\n\n    if (target.value === '0') {\n      setVisiblePosts(await getAllPosts());\n    } else {\n      getUserPosts(+target.value)\n        .then(posts => setVisiblePosts(posts));\n    }\n  };\n\n  useEffect(() => {\n    getAllPosts()\n      .then(posts => {\n        setVisiblePosts(posts);\n      });\n  }, []);\n\n  useEffect(() => {\n    getUsers()\n      .then(allUsers => {\n        setUsers(allUsers);\n      });\n\n    if (selectedPostId === 0) {\n      return setDetailsVisibilyty(false);\n    }\n\n    if (selectedPostId !== 0) {\n      getPostDetails(selectedPostId)\n        .then(post => setDetails(post));\n\n      setDetailsVisibilyty(true);\n    }\n\n    return setDetails(null);\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={HandleSelect}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={visiblePosts}\n            selectedPostId={selectedPostId}\n            onSelectPost={setSelectedPostId}\n            onSetDetailVisibility={setDetailsVisibilyty}\n          />\n        </div>\n\n        {isDetailsVisible && (\n          <div className=\"App__content\">\n            <PostDetails\n              details={details}\n              selectedPostId={selectedPostId}\n            />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { User } from '../types/User';\nimport { getData } from './api';\n\nexport const getUsers = () => getData<User[]>('/users');\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}